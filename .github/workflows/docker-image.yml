name: Node js app build using docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  linter:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'
        
    - name: Install Node.js dependencies
      run: npm ci

    - name: Code Linting
      run: npm run lint
        
  build-docker:
    needs: linter
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ../../
        file: ../../Dockerfile
        push: false
        tags: anastasiiabezruka/spammer-nodejs-app
        
  deploy-docker:
    needs: build-docker
    runs-on: ubuntu-latest
    
    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v2
      with:
        images: anastasiiabezruka/spammer-nodejs-app
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ../../
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
  test-app:
    needs: deploy-docker
    runs-on: ubuntu-latest
    
    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Pull image from Docker Hub
      run: docker image pull anastasiiabezruka/spammer-nodejs-app:latest
    
    - name: Run docker image and test it using curl
      shell: bash
      run: |
        docker run -p 80:8080 --name spammer -d anastasiiabezruka/spammer-nodejs-app
        HTTP_STATUS=$(curl -i -X GET http://localhost:80/home)
        if [[ $HTTP_STATUS!="200" ]]; then
          echo "The spammer app response not 200 but ${HTTP_STATUS}"
          exit 1
        fi
        else
          echo "The spammer app works fine"
        fi
        
      
